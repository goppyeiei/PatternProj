{"version":3,"sources":["function.js","App.js","reportWebVitals.js","index.js"],"names":["result","bmi","underweight","console","log","normal","overweight","obese","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","cardStyle","maxWidth","display","justifyContent","alignItems","marginTop","ButtonAppBar","classes","useState","weight","setweight","height","setheight","setresult","setbmi","matches","useMediaQuery","weightss","loop","autoplay","animationData","weights","rendererSettings","preserveAspectRatio","className","AppBar","position","style","backgroundColor","Toolbar","Typography","variant","Grid","container","item","xs","md","options","width","Card","CardContent","Container","margin","TextField","id","label","value","type","onChange","e","target","Button","component","onClick","data","nweight","Number","nheight","receive","setTimeout","bmix","undefined","textAlign","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1a45ce1.chunk.js","sourcesContent":["var result = \"\";\r\nvar bmi = 0;\r\nexport const receive = (data) => {\r\n  const nweight = Number(data.weight);\r\n  const nheight = Number(data.height);\r\n  bmi = nweight / (nheight / 100) ** 2;\r\n  //   console.log(bmi);\r\n  underweight(bmi);\r\n};\r\n\r\nexport const underweight = (bmi) => {\r\n  if (bmi <= 18.5) {\r\n    console.log(\"underweight\");\r\n    result = \"Underweight\";\r\n  } else {\r\n    normal(bmi);\r\n  }\r\n};\r\n\r\nexport const normal = (bmi) => {\r\n  if (bmi <= 22.9) {\r\n    console.log(\"normal\");\r\n    result = \"Normal\";\r\n  } else {\r\n    overweight(bmi);\r\n  }\r\n};\r\n\r\nexport const overweight = (bmi) => {\r\n  if (bmi <= 29.9) {\r\n    console.log(\"overweight\");\r\n    result = \"Overweight\";\r\n  } else {\r\n    obese(bmi);\r\n  }\r\n};\r\nexport const obese = () => {\r\n  console.log(\"obese\");\r\n  result = \"Obese\";\r\n};\r\n\r\nexport const sendbackres = () => {\r\n  return result;\r\n};\r\nexport const sendbackbmi = () => {\r\n  return bmi;\r\n};\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Lottie from \"react-lottie\";\nimport weights from \"./lottie/23421-work-out-weight-lifting.json\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { Container } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { receive, sendbackres, sendbackbmi } from \"./function\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  cardStyle: {\n    maxWidth: 750,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 30,\n    // margin: 20,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n  const [weight, setweight] = useState();\n  const [height, setheight] = useState();\n  const [result, setresult] = useState();\n  const [bmi, setbmi] = useState();\n\n  const matches = useMediaQuery(\"(max-width:600px)\");\n\n  function senddata() {\n    const data = {\n      weight: weight,\n      height: height,\n    };\n    receive(data);\n\n    setTimeout(() => {\n      const resx = sendbackres();\n      const bmix = sendbackbmi();\n      setresult(resx);\n      setbmi(bmix);\n    }, 500);\n  }\n  // console.log(\"result :\", result);\n\n  const weightss = {\n    loop: true,\n    autoplay: true,\n    animationData: weights,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ backgroundColor: \"#2081FC\" }}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            BMI CALCULATOR\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container>\n        <Grid item xs={12} md={6} style={{ marginTop: 130 }}>\n          <div>\n            <Lottie\n              options={weightss}\n              height={matches ? 300 : 600}\n              width={matches ? 300 : 600}\n            />\n          </div>\n        </Grid>\n        <Grid item xs={12} md={6} style={{}}>\n          <div>\n            <Card className={classes.cardStyle}>\n              <CardContent>\n                <Container style={{ margin: 50 }}>\n                  <TextField\n                    id=\"outlined-basic\"\n                    label=\"Weight (Kilograms)\"\n                    value={weight}\n                    variant=\"outlined\"\n                    type=\"number\"\n                    onChange={(e) => setweight(e.target.value)}\n                  />\n                </Container>\n                <Container style={{ margin: 50 }}>\n                  <TextField\n                    id=\"outlined-basic\"\n                    label=\"Height (Centimeters)\"\n                    value={height}\n                    variant=\"outlined\"\n                    type=\"number\"\n                    onChange={(e) => setheight(e.target.value)}\n                  />\n                </Container>\n                <Button\n                  variant=\"contained\"\n                  component=\"span\"\n                  className={classes.cardStyle}\n                  style={{ backgroundColor: \"#5BA3FF\" }}\n                  onClick={senddata}\n                >\n                  Calculate\n                </Button>\n                {/* <h1 className={classes.cardStyle}>{result}</h1> */}\n                {result !== undefined && result !== null ? (\n                  <div>\n                    <Typography\n                      variant=\"h5\"\n                      style={{ textAlign: \"center\", margin: 10 }}\n                    >\n                      Your BMI : {bmi}\n                    </Typography>\n                    <Typography\n                      variant=\"h5\"\n                      style={{ textAlign: \"center\", margin: 10 }}\n                    >\n                      You are : {result}\n                    </Typography>\n                  </div>\n                ) : (\n                  <h1 className={classes.cardStyle}>-----</h1>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n          <Card className={classes.cardStyle} style={{ marginTop: 30 }}>\n            <CardContent>\n              <img\n                src=\"https://bodivisthailand.com/wp-content/uploads/2019/05/bmi-categories_med.jpeg\"\n                style={{ width: matches ? 300 : 580 }}\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}